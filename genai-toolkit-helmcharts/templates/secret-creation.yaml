apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-manager
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-manager
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-1"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-1"
subjects:
- kind: ServiceAccount
  name: secret-manager
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
---
{{- if eq .Values.openshiftCompatibleMode true}}
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding-privileged-scc
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-1"
subjects:
- kind: ServiceAccount
  name: secret-manager
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: system:openshift:scc:privileged
  apiGroup: rbac.authorization.k8s.io
---
{{- end }}
apiVersion: batch/v1
kind: Job
metadata:
  name: rsa-key-generator
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
spec:
  ttlSecondsAfterFinished: 1
  template:
    spec:
      serviceAccountName: secret-manager
{{- if eq .Values.openshiftCompatibleMode true}}
      securityContext:
        runAsUser: 0
{{- end }}
      containers:
      - name: key-generator
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            set -e  # Exit immediately if a command exits with a non-zero status
            echo "Starting key generation..."
            apk add --no-cache openssl curl && \
            echo "Installed dependencies." && \
            curl -LO "https://dl.k8s.io/release/v1.31.1/bin/linux/amd64/kubectl" && \
            chmod +x ./kubectl && \
            mv ./kubectl /usr/local/bin/kubectl && \
            echo "Downloaded and installed kubectl." && \
            if kubectl get secret rsa-keys; then \
              echo "Secret rsa-keys already exists. Exiting."; \
            else \
              echo "Generating keys..." && \
              openssl genpkey -out /keys/private_key.pem -algorithm RSA -pkeyopt rsa_keygen_bits:2048 && \
              openssl rsa -in /keys/private_key.pem -pubout > /keys/public_key.rsa && \
              echo "Keys generated. Creating secret..." && \
              kubectl create secret generic rsa-keys \
                --from-file=/keys/private_key.pem \
                --from-file=/keys/public_key.rsa && \
              echo "Secret created."; \
            fi
        volumeMounts:
        - name: keys-volume
          mountPath: /keys
      restartPolicy: OnFailure
      volumes:
      - name: keys-volume
        emptyDir: {}